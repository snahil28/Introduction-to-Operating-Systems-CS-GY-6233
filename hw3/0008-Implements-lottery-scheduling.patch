From bf621b9c4dc2ecaa504ef0c8bb45a7d7ea260128 Mon Sep 17 00:00:00 2001
From: anmol <as11294@nyu.edu>
Date: Fri, 6 Apr 2018 20:27:07 -0400
Subject: [PATCH 8/8] Implements lottery scheduling

---
 Makefile  |  1 +
 proc.c    | 44 ++++++++++++++++++++++++++++++++++++++++----
 proc.h    |  6 ++++++
 syscall.c |  2 ++
 syscall.h |  1 +
 sysproc.c |  8 ++++++++
 user.h    |  1 +
 usys.S    |  1 +
 8 files changed, 60 insertions(+), 4 deletions(-)

diff --git a/Makefile b/Makefile
index 5d91068..7d17a81 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index b122e3b..6ccdc6b 100644
--- a/proc.c
+++ b/proc.c
@@ -16,6 +16,7 @@ struct {
 static struct proc *initproc;
 
 int nextpid = 1;
+long ticketsAssignedTotal = 0;
 extern void forkret(void);
 extern void trapret(void);
 
@@ -50,7 +51,9 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = TICKETS_AT_START;	//Initially each process will have 10 tickets.
   release(&ptable.lock);
+  ticketsAssignedTotal += TICKETS_AT_START;
 
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
@@ -76,6 +79,26 @@ found:
   return p;
 }
 
+int setprocesstickets(int processid, int nooftickets){
+  int i;
+  struct proc *ptr;
+  acquire(&ptable.lock);
+  for(i = 0; i < NPROC; i++){
+    ptr = &proc[i];
+    if(ptr->pid != processid)
+      continue;
+    if(ptr->state == UNUSED)
+      return -1;
+    if(ptr->state == RUNNING || ptr->state == RUNNABLE){
+      ticketsAssignedTotal += (nooftickets - ptr->tickets);
+      ptr->tickets = nooftickets;
+      release(&ptable.lock);
+      return 0;
+    }
+  }
+  release(&ptable.lock);
+  return -1;
+}
 //PAGEBREAK: 32
 // Set up first user process.
 void
@@ -193,6 +216,7 @@ exit(void)
   iput(proc->cwd);
   end_op();
   proc->cwd = 0;
+  ticketsAssignedTotal -= proc->tickets;
 
   acquire(&ptable.lock);
 
@@ -270,19 +294,27 @@ scheduler(void)
 {
   struct proc *p;
   int foundproc = 1;
-
+  int ticketsTravelled = 0, lotteryTicket = 0;
   for(;;){
+    ticketsTravelled = 0;
     // Enable interrupts on this processor.
     sti();
 
     if (!foundproc) hlt();
     foundproc = 0;
 
+    lotteryTicket = random_at_most(ticketsAssignedTotal);
+
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+
+      if(p->state == SLEEPING || p->state == EMBRYO || p->state == UNUSED || p->state == ZOMBIE)
         continue;
+      ticketsTravelled += p->tickets;
+      if(ticketsTravelled < lotteryTicket){
+  	continue;
+      }
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -297,6 +329,7 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       proc = 0;
+      break;
     }
     release(&ptable.lock);
 
@@ -377,6 +410,7 @@ sleep(void *chan, struct spinlock *lk)
   }
 
   // Go to sleep.
+  ticketsAssignedTotal = ticketsAssignedTotal - proc->tickets;	//Revoke Tickets assigned to sleeping processes 
   proc->chan = chan;
   proc->state = SLEEPING;
   sched();
@@ -400,8 +434,10 @@ wakeup1(void *chan)
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+    if(p->state == SLEEPING && p->chan == chan){
+      ticketsAssignedTotal += p->tickets;
       p->state = RUNNABLE;
+    }
 }
 
 // Wake up all processes sleeping on chan.
@@ -463,7 +499,7 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+    cprintf("%d %s %s %d", p->pid, state, p->name, p->tickets);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
diff --git a/proc.h b/proc.h
index 3b9c3ac..3462665 100644
--- a/proc.h
+++ b/proc.h
@@ -1,3 +1,5 @@
+// Tickets each process will be assigned when spawned.
+#define TICKETS_AT_START 10
 // Segments in proc->gdt.
 #define NSEGS     7
 
@@ -66,6 +68,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;		       // Number of tickets assigned for scheduling
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -73,3 +76,6 @@ struct proc {
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+
+//Set tickets function prototype for syscall
+int setprocesstickets(int, int);
diff --git a/syscall.c b/syscall.c
index 0e06ad4..849877c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..6a9d0a7 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -98,3 +98,11 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+int
+sys_settickets(void) {
+  int tickets;
+  if(argint(0, &tickets) < 0)
+    return -1;
+  
+  return setprocesstickets(proc->pid, tickets);
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
1.9.1

